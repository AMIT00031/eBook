<?php
defined('BASEPATH') OR exit('No direct script access allowed');
require APPPATH . 'libraries/REST_Controller.php';

/**
 * @author : jeevan<jeevan@seoessenc.com>
 * @date : 31-oct-2018
 * @objective : Get all information regarding jobs 
 */
class Jobs extends REST_Controller {

    function __construct() {
        parent::__construct();
        $this->load->model('admin/job_model');
        $this->load->model('admin/job_category_model');
        
       
    }

    public function job_category_get() {
        $category = $this->job_category_model->where('parent_id', 0)->get_all();
        if (!empty($category)) {
            $response = array(
                'result' => $category, // Automatically generated by the model
                'status' => '1'
            );
            $this->set_response($response, REST_Controller::HTTP_OK);
        } else {
            $this->set_response([
                'status' => '0',
                'message' => 'No record found'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }
    
    
    public function job_sub_category_post() {
        $postData = $this->input->post();
        $categoryId = !empty($postData['category_id']) ? trim($postData['category_id']) : '';
        $category = $this->job_category_model->where('parent_id', $categoryId)->get_all();
//        dump($category);die;
        if (!empty($category)) {
            $response = array(
                'result' => $category, // Automatically generated by the model
                'status' => '1'
            );
            $this->set_response($response, REST_Controller::HTTP_OK);
        } else {
            $this->set_response([
                'status' => '0',
                'message' => 'No record found'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function create_job_post() {
        $postData = $this->input->post();

        $res = $this->job_model->insert($postData);
        if ($res) {
            $response = array(
                'status' => '1',
                'message' => 'Job posted successfully.'
            );
            $this->set_response($response, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
        } else {
            $response = array(
                'status' => '0',
                'message' => 'Job not posted successfully.Something went wrong'
            );
            $this->set_response($response, REST_Controller::HTTP_BAD_REQUEST); // CREATED (201) being the HTTP response code
        }
    }

    public function update_user_post() {
        $postData = $this->input->post();

        $id = !empty($postData['user_id']) ? $postData['user_id'] : '';

        $email = !empty($postData['email']) ? $postData['email'] : '';
        $username = !empty($postData['username']) ? $postData['username'] : '';
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            $this->set_response([
                'status' => '0',
                'message' => 'Invalid email format'
                    ], REST_Controller::HTTP_BAD_REQUEST); // NOT_FOUND (40) being the HTTP response code
        }


        if (!empty($_FILES['image']['name'])) {
            $userImages['image'] = $_FILES['image'];

            $condition_array = array(
                'path' => $this->userDir,
                'extention' => 'jpeg|jpg|png',
                'redirect_url' => '',
            );

            $user_image = $this->Common_Model->uploadFile($userImages, $condition_array);
            $postData['photo'] = $user_image;
        }

        $user_id = $this->user_model->update($postData, $id);
        $userData = $this->user_model->get($id);
        if (!empty($userData->photo)) {
            $userData->image_path = base_url('uploads/users/' . $userData->photo);
        }

        if ($user_id) {
            $response = array(
                'result' => $userData, // Automatically generated by the model
                'status' => '1',
                'message' => 'User updated successfully'
            );
            $this->set_response($response, REST_Controller::HTTP_OK);
        } else {
            $response = array(
                'result' => $userData, // Automatically generated by the model
                'status' => '0',
                'message' => 'Something went wrong'
            );
            $this->set_response($response, REST_Controller::HTTP_BAD_REQUEST);
        }
    }
    
    public function jobs_list_get() {
        $user_id = $this->input->get('user_id');
        $reguser_id = $this->input->get('user_id');
        /*if (!empty($user_id)) {
            $user_id = $this->get('user_id');
        $reguser_id = $this->get('user_id');
        }
        else
        {
         $user_id =0;
        $reguser_id = 0;
        }*/
        
        
        if (!empty($user_id)) {
            $condition = array();//$condition = array('user_id' => $user_id);
        } else {
            $condition = array();
        }
        $finaljobs=[];
        $jobs = $this->job_model->with_category()->where($condition)->order_by('created_at', 'desc')->get_all();
        //echo (count($jobs)); exit;
        //for($count = 0; $count<(count($jobs)); $count++; ){
        // for ($countn = 0; $countn <= (count($jobs)); $countn++) {
        // $finaljobs[]=$jobs;
        $i=0;
        foreach ($jobs as $key => $jobdata){
            // print_r($jobdata);
            $userName =  $this->job_model->getUserDetail($jobs[$key]->user_id,$jobs[$key]->id,$reguser_id);
          
            // $finaljobs[$i]['user_name'] = $userName;
            $expnameapp=explode("_",$userName);
          
            if($expnameapp[0]!='') {
                if($expnameapp[1]>0) {
                    $expapp=1;
                } else {
                    $expapp=0;
                }
                if (!empty($expnameapp[2])) {
                    if($expnameapp[2]>0) {  
                        $favname=1;
                    } else {
                        $favname=0;
                    }  
                }else {
                    $favname=0;
                }
                if (!empty($expnameapp[3])) {
                    if(!$expnameapp[3]) {
                        $faexp=$expnameapp[3];
                    } else {
                        $faexp="";
                    }  
                }else {
                    $faexp="";
                }
             
                if($expapp!='1') {
                    $finaljobs[] = array(
                        "id" => $jobs[$key]->id,
                        "user_id" => $jobs[$key]->user_id,
                         "user_name" => $expnameapp[0],
                         "user_email" => $expnameapp[3],
                          "is_applied" => $expapp,
                           "is_fav" => $favname,
                        "job_title" => $jobs[$key]->job_title,
                        "job_description" => $jobs[$key]->job_description,
                        "location" => $jobs[$key]->location,
                        "min_salary" => $jobs[$key]->min_salary,
                        "max_salary" => $jobs[$key]->max_salary,
                        "type" => $jobs[$key]->type,
                        "experience" => $jobs[$key]->experience,
                        "compony" => $jobs[$key]->compony,
                        "role" => $jobs[$key]->role,
                        "created_at" => $jobs[$key]->created_at,
                        
                        "updated_at" => $jobs[$key]->updated_at,
                        "status" => $jobs[$key]->status,
                        "category_id" => $jobs[$key]->category_id,
                        "sub_category_id" => $jobs[$key]->sub_category_id,
                        "currency" => $jobs[$key]->currency,
                        "category" => $jobs[$key]->category,
                      
                        
                    );
                    $finaljobsdata =  $finaljobs;
                }
          
                $i++;
            }
        }
  
        // print_r( (object)($movie)); exit; 
        //$jobs['user_name']=$userName;
        if (!empty($finaljobsdata)) {
            $this->set_response([
                'status' => '1',
                'total_records' => count($finaljobs),
                'result' => $finaljobsdata,
                    ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        } else {
            $this->set_response([
                'status' => '0',
                'message' => 'No job found'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }
    public function jobs_list_get_by_serch() {
        $user_id = $this->input->get('user_id');
        $reguser_id = $this->input->get('user_id');

        $user_id = 9;
        $reguser_id = 9;
        

        if (!empty($user_id)) {
            $condition = array();
        } else {
            $condition = array();
        }
        $finaljobs=[];
        $jobs = $this->job_model->with_category()->where($condition)->order_by('created_at', 'desc')->get_all();
        $i=0;
        var_dump($user_id);
        foreach ($jobs as $key => $jobdata){
            $userName =  $this->job_model->getUserDetail($jobs[$key]->user_id,$jobs[$key]->id,$reguser_id);
            $expnameapp=explode("_",$userName);
            if($expnameapp[0]!='') {
                if($expnameapp[1]>0) {
                    $expapp=1;
                } else {
                    $expapp=0;
                }
                if (!empty($expnameapp[2])) {
                    if($expnameapp[2]>0) {  
                        $favname=1;
                    } else {
                        $favname=0;
                    }  
                }else {
                    $favname=0;
                }
                if (!empty($expnameapp[3])) {
                    if(!$expnameapp[3]) {
                        $faexp=$expnameapp[3];
                    } else {
                        $faexp="";
                    }  
                }else {
                    $faexp="";
                }
             
                if($expapp!='1') {
                    $finaljobs[] = array(
                        "id" => $jobs[$key]->id,
                        "user_id" => $jobs[$key]->user_id,
                        "user_name" => $expnameapp[0],
                        "user_email" => $expnameapp[3],
                        "is_applied" => $expapp,
                        "is_fav" => $favname,
                        "job_title" => $jobs[$key]->job_title,
                        "job_description" => $jobs[$key]->job_description,
                        "location" => $jobs[$key]->location,
                        "min_salary" => $jobs[$key]->min_salary,
                        "max_salary" => $jobs[$key]->max_salary,
                        "type" => $jobs[$key]->type,
                        "experience" => $jobs[$key]->experience,
                        "compony" => $jobs[$key]->compony,
                        "role" => $jobs[$key]->role,
                        "created_at" => $jobs[$key]->created_at,
                        "updated_at" => $jobs[$key]->updated_at,
                        "status" => $jobs[$key]->status,
                        "category_id" => $jobs[$key]->category_id,
                        "sub_category_id" => $jobs[$key]->sub_category_id,
                        "currency" => $jobs[$key]->currency,
                        "category" => $jobs[$key]->category,
                    );
                    $finaljobsdata =  $finaljobs;
                }
                $i++;
            }
        }
        // print_r( (object)($movie)); exit; 
        //$jobs['user_name']=$userName;
        if (!empty($finaljobsdata)) {
            $this->set_response([
                'status' => '1',
                'total_records' => count($finaljobs),
                'result' => $finaljobsdata,
                    ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        } else {
            $this->set_response([
                'status' => '0',
                'message' => 'No job found'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    function create_payload_json($message, $title) {
        $badge = "0";
        $sound = 'default';
        $payload = array();
        $payload['aps'] = array('message' => $message, 'title' => $title, 'badge' => intval($badge), 'sound' => $sound);
        return json_encode($payload);
    }
    
    public function jobs_apply_post() {
        $postData = $this->input->post();
        $user_id = !empty($postData['user_id']) ? $postData['user_id'] : '';
        $job_id = !empty($postData['job_id']) ? $postData['job_id'] : '';
        $user_email = !empty($postData['user_email']) ? $postData['user_email'] : '';
        $job_title = !empty($postData['job_title']) ? $postData['job_title'] : '';
        $resemail = $this->job_model->getuser($user_id);
        $explemailres=explode('-',$resemail);
     
        if (!empty($explemailres[1])) { 
            $data = array(
                'user_id' => $user_id,
                'job_id' =>  $job_id,
                'Created_on' =>date("Y-m-d")
            );
            $validateapi = $this->job_model->validatejobapply_insert($data);
      
            if($validateapi === FALSE){
                $resemail = $this->job_model->getuser($user_id); 
                $explemailres=explode('-',$resemail);
                if (!empty($explemailres[1])) { $explemailres[1]="You Can View Resume On  <a href='http://dnddemo.com/oilbizz/uploads/resume/$explemailres[1]'>This Link </a>.";  } 
                else {$explemailres[1]='';}

                $from_email = "no-reply@oilbizz.com"; 
                //   $to_email = $user_email; 
                $to_email = "bivek908@gmail.com"; 
                //Load email library 
                $this->load->library('email'); 
                $mess='<table width="100%" border="0">
                  <tr><td>Dear,</td></tr>
                   <tr><td>'.$explemailres[0].' have applied for Job '.$job_title.'. '.$explemailres[1].' </td></tr>
                    <tr><td>&nbsp;</td></tr>  <tr><td>&nbsp;</td></tr>  <tr><td>&nbsp;</td></tr>
                     <tr><td>Thanks </td></tr>
                       <tr><td>oilBizz Team   </td></tr>
                  </table>
                  '; 
      
                $this->email->set_mailtype("html");
                $this->email->from($from_email, 'OilBizz'); 
                $this->email->to($to_email);
                $this->email->subject('OilBizz Job'); 
                $this->email->message($mess); 
                $this->email->send();

                $res = $this->job_model->jobapply_insert($data);   
            }
            else {
                $res = FALSE;

            }
        }
        else {
            $res = 'RESUME';

        }
 
 
        //print_r($res); exit;
        if($res === 'RESUME'){
            $response = array(
                'status' => '0',
                'message' => 'Please Upload Your Resume'
            );
            $this->set_response($response, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
        } elseif($res === FALSE){

            $response = array(
            'status' => '0',
            'message' => 'You Have Already Applied'
            );
            $this->set_response($response, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
        } else {
            $response = array(
                'status' => '1',
                'message' => 'Applied Job posted successfully.'
            );
            $this->set_response($response, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
       }
    }
     
     
    public function favjobs_post() {
         $postData = $this->input->post();
       
          $user_id = !empty($postData['user_id']) ? $postData['user_id'] : '';
            $job_id = !empty($postData['job_id']) ? $postData['job_id'] : '';
             $fav_id = !empty($postData['fav_id']) ? $postData['fav_id'] : '';
              $data = array(
'user_id' => $user_id,
'job_id' =>  $job_id,
'fav_id' =>  $fav_id,
'Created_on' =>date("Y-m-d")
);

    $validateapi = $this->job_model->validatefav($data);
   if($validateapi === FALSE){
         $res = $this->job_model->favapply_insert($data);
         $respon="Insert";
 }
 else {
       $res = $this->job_model->favapply_update($data);
     //$res = $this->job_model->favapply_update($data);  
     $respon="Update";
 }
 
  if($respon === "Update"){
           
                   $response = array(
                'status' => '1',
                'message' => 'Updated successfully'
            );
            $this->set_response($response, REST_Controller::HTTP_BAD_REQUEST); // CREATED (201) being the HTTP response code
       
             } else {
               
                   $response = array(
                'status' => '1',
                'message' => 'Inserted successfully.'
            );
            $this->set_response($response, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
     
       }
 
    
     }
     
     public function job_roles_get() {
        $jobrole = $this->job_model->jobrole_select(); 
        if (!empty($jobrole)) {
            $this->set_response([
                'status' => '1',
                'total_records' => count($jobrole),
                'result' => $jobrole,
                    ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        } else {
            $this->set_response([
                'status' => '0',
                'message' => 'No job Roles found'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    } 
    
      public function job_notification_get() {
            $user_id = $this->input->get('user_id');
        $jobnotification = $this->job_model->jobnotification_select($user_id); 
      
        if (!empty($jobnotification)) {
            $this->set_response([
                'status' => '1',
                'total_records' => count($jobnotification),
                'result' => $jobnotification,
                    ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        } else {
            $this->set_response([
                'status' => '0',
                'message' => 'No job Notification found'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }
    
     public function getrequestforjob_get() {
      $user_id = $this->input->get('user_id');
        $jobrequestforjob = $this->job_model->jobrequestn_select($user_id); 
      if (!empty($jobrequestforjob)) {
            $this->set_response([
                'status' => '1',
                'total_records' => count($jobrequestforjob),
                'result' => $jobrequestforjob,
                    ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        } else {
            $this->set_response([
                'status' => '0',
                'message' => 'No job Request found'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
     }
     
     
       public function acceptforjob_post() {
         $postData = $this->input->post();
      
          $appjid = !empty($postData['appjid']) ? $postData['appjid'] : '';
            $user_id = !empty($postData['user_id']) ? $postData['user_id'] : '';
             $message = !empty($postData['message']) ? $postData['message'] : '';
               $email = !empty($postData['email']) ? $postData['email'] : '';
              $data = array(
                'appjid' => $appjid,
                'user_id' =>  $user_id,
                'message' =>  $message,
                'email' =>  $email,
                'Updated_on' =>date("Y-m-d")
                );
  $res = $this->job_model->acceptforjob_update($data);

   if($res === FALSE){
           
                   $response = array(
                'status' => '0',
                'message' => 'Applied Job Status Not Accept successfully'
            );
            $this->set_response($response, REST_Controller::HTTP_BAD_REQUEST); // CREATED (201) being the HTTP response code
       
             } else {
               
                   $response = array(
                'status' => '1',
                'message' => 'Applied Job Status  Accept successfully.'
            );
            $this->set_response($response, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
     
       }
      
 
    
     }
     
  public function rejectforjob_post() {
         $postData = $this->input->post();
      
          $appjid = !empty($postData['appjid']) ? $postData['appjid'] : '';
            $user_id = !empty($postData['user_id']) ? $postData['user_id'] : '';
             $message = !empty($postData['message']) ? $postData['message'] : '';
               $email = !empty($postData['email']) ? $postData['email'] : '';
              $data = array(
'appjid' => $appjid,
'user_id' =>  $user_id,
'message' =>  $message,
'email' =>  $email,
'Updated_on' =>date("Y-m-d")
);
  $res = $this->job_model->rejectforjob_update($data);

   if($res === FALSE){
           
                   $response = array(
                'status' => '0',
                'message' => 'Applied Job Status Not Rejected successfully'
            );
            $this->set_response($response, REST_Controller::HTTP_BAD_REQUEST); // CREATED (201) being the HTTP response code
       
             } else {
               
                   $response = array(
                'status' => '1',
                'message' => 'Applied Job Status Rejected successfully.'
            );
            $this->set_response($response, REST_Controller::HTTP_OK); // CREATED (201) being the HTTP response code
     
       }
      
 
    
     }    
     
     
    public function jobsuser_list_get() {
        $user_id = $this->input->get('user_id');
        $reguser_id = $this->input->get('user_id');
          $condition = array('user_id' => $user_id);
$finaljobs=[];
        $jobs = $this->job_model->with_category()->where($condition)->order_by('created_at', 'desc')->get_all();
    
   if (!empty($jobs)) {
     foreach ($jobs as $key => $jobdata){
        // print_r($jobdata);
         $userName =  $this->job_model->getUsertotDetail($jobs[$key]->user_id,$jobs[$key]->id,$reguser_id);
       $i=0;
        // $finaljobs[$i]['user_name'] = $userName;
        $expnameapp=explode("_",$userName);
        if($expnameapp[1]>0) {$expapp=$expnameapp[1];} else {$expapp=0;}
          if (!empty($expnameapp[2])) {
         if($expnameapp[2]>0) {$favname=$expnameapp[2];} else {$favname=0;}  }else {$favname=0;}
         
        // print_r($expnameapp); exit;
             $finaljobs[] = array(
                "id" => $jobs[$key]->id,
                "user_id" => $jobs[$key]->user_id,
                 "user_name" => $expnameapp[0],
                 "user_email" => $expnameapp[3],
                  "total_applied" => $expapp,
                   "total_fav" => $favname,
                "job_title" => $jobs[$key]->job_title,
                "job_description" => $jobs[$key]->job_description,
                "location" => $jobs[$key]->location,
                "min_salary" => $jobs[$key]->min_salary,
                "max_salary" => $jobs[$key]->max_salary,
                "type" => $jobs[$key]->type,
                "experience" => $jobs[$key]->experience,
                "compony" => $jobs[$key]->compony,
                "role" => $jobs[$key]->role,
                "created_at" => $jobs[$key]->created_at,
                
                "updated_at" => $jobs[$key]->updated_at,
                "status" => $jobs[$key]->status,
                "category_id" => $jobs[$key]->category_id,
                "sub_category_id" => $jobs[$key]->sub_category_id,
                "currency" => $jobs[$key]->currency,
                "category" => $jobs[$key]->category,
              
                
                );
               $finaljobsdata =  $finaljobs;
         $i++;
         
         
      }}
    
    
   
        if (!empty($jobs)) {
            $this->set_response([
                'status' => '1',
                'total_records' => count($finaljobsdata),
                'result' => $finaljobsdata,
                    ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        } else {
            $this->set_response([
                'status' => '0',
                'message' => 'No User found'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }
  public function appliedjobuser_list_get() {
        $user_id = $this->input->get('user_id');
       
      $jobs =  $this->job_model->getappliedjobuser($user_id);  
       $reguser_id = $this->get('user_id');
       $i=0;
        if (!empty($jobs)) {
     foreach ($jobs as $key => $jobdata){
        // print_r($jobdata);
         $userName =  $this->job_model->getUserDetail($jobs[$key]->user_id,$jobs[$key]->id,$reguser_id);
      
        // $finaljobs[$i]['user_name'] = $userName;
        $expnameapp=explode("_",$userName);
        
          if($expnameapp[0]!='') {
        if($expnameapp[1]>0) {$expapp=1;} else {$expapp=0;}
          if (!empty($expnameapp[2])) {
         if($expnameapp[2]>0) {$favname=1;} else {$favname=0;}  }else {$favname=0;}
          if (!empty($expnameapp[3])) {
         if(!$expnameapp[3]) {$faexp=$expnameapp[3];} else {$faexp="";}  }else {$faexp="";}
        
        
             $finaljobs[] = array(
                "id" => $jobs[$key]->id,
                "user_id" => $jobs[$key]->user_id,
                 "user_name" => $expnameapp[0],
                 "user_email" => $expnameapp[3],
                  "is_applied" => $expapp,
                   "is_fav" => $favname,
                "job_title" => $jobs[$key]->job_title,
                "job_description" => $jobs[$key]->job_description,
                "location" => $jobs[$key]->location,
                "min_salary" => $jobs[$key]->min_salary,
                "max_salary" => $jobs[$key]->max_salary,
                "type" => $jobs[$key]->type,
                "experience" => $jobs[$key]->experience,
                "compony" => $jobs[$key]->compony,
                "role" => $jobs[$key]->role,
                "created_at" => $jobs[$key]->created_at,
                
                "updated_at" => $jobs[$key]->updated_at,
                "status" => $jobs[$key]->status,
                "category_id" => $jobs[$key]->category_id,
                "sub_category_id" => $jobs[$key]->sub_category_id,
                "currency" => $jobs[$key]->currency,
               // "category" => $jobs[$key]->category,
              
                
                );
               $finaljobsdata =  $finaljobs;
     
      
         $i++;
      }
         
     }
      
        }
    
      
     if (!empty($finaljobsdata)) {
            $this->set_response([
                'status' => '1',
                'total_records' => count($finaljobsdata),
                'result' => $finaljobsdata,
                    ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        } else {
            $this->set_response([
                'status' => '0',
                'message' => 'User Have Not Apply Any Job Yet.'
                    ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }
      
  }
  
     public function totalappliedjob_list_get() {
        $job_id = $this->input->get('job_id');
       
      $appliedjob =  $this->job_model->getappliedtotaljobuser($job_id);  
     if (!empty($appliedjob)) {
            $this->set_response([
                'status' => '1',
                'total_records' => count($appliedjob),
                'result' => $appliedjob,
                    ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        } else {
            $this->set_response([
                'status' => '0',
                'message' => 'User Have Not Apply On This  Job Yet.'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
      
  }
      public function totalfavjob_list_get() {
        $job_id = $this->input->get('job_id');
       
      $appliedjob =  $this->job_model->getappliedtotalfavuser($job_id);  
     if (!empty($appliedjob)) {
            $this->set_response([
                'status' => '1',
                'total_records' => count($appliedjob),
                'result' => $appliedjob,
                    ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        } else {
            $this->set_response([
                'status' => '0',
                'message' => 'User Have Not Apply On This Fav Yet.'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
      
  }
}
